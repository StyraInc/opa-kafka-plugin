plugins {
    id 'scala'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.bisnode.opa' version '0.3.2'
}

group 'org.openpolicyagent.kafka'
version '1.4.0'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

// See versions used in Kafka here https://github.com/apache/kafka/blob/2.8.0/gradle/dependencies.gradle
dependencies {
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-scala_2.13', version: '2.10.5'
    implementation group: 'org.apache.kafka', name: 'kafka_2.13', version: '2.8.0'
    implementation group: 'com.google.guava', name: 'guava', version: '30.1-jre'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    testImplementation group: 'org.scalatest', name: 'scalatest_2.13', version: '3.2.5'
    testImplementation group: 'org.scalatestplus', name: 'junit-4-13_2.13', version: '3.2.5.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.14.0'
}

shadowJar {
    dependencies {
        exclude(dependency {
            !(it.moduleGroup in [
                    'org.openpolicyagent.kafka',
                    'com.fasterxml.jackson.module',
                    'com.thoughtworks.paranamer',
                    'com.google.guava'
            ])
        })
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId ='org.openpolicyagent.kafka'
            artifactId = 'opa-authorizer'
            version = '1.4.0'

            from components.java

            pom {
                name = 'Open Policy Agent plugin for Kafka authorization'
                description = 'Open Policy Agent (OPA) plugin for Kafka authorization.'
                url = 'https://github.com/anderseknert/opa-kafka-plugin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Anders Eknert'
                        email = 'anders@eknert.com'
                        organization = 'Styra'
                        organizationUrl = 'https://www.styra.com'
                    }
                    developer {
                        name = 'Jakub Scholz'
                        email = 'jakub@scholz.cz'
                        organization = 'Red Hat'
                        organizationUrl = 'https://www.redhat.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/anderseknert/opa-kafka-plugin.git'
                    developerConnection = 'scm:git:ssh://github.com/anderseknert/opa-kafka-plugin.git'
                    url = 'https://github.com/anderseknert/opa-kafka-plugin.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

check.dependsOn(testRego, testRegoCoverage)
test.dependsOn startOpa
test.finalizedBy stopOpa
test.outputs.upToDateWhen {
    // Consider alternatives to this: https://stackoverflow.com/a/52484259
    false
}
